// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BusinessType {
  CLEANING
  PLUMBING
  HVAC
  DENTAL
  BEAUTY
  FITNESS
  TUTORING
  AUTO_REPAIR
  LANDSCAPING
  CATERING
}

model Organization {
  id            String       @id @default(cuid())
  name          String
  businessType  BusinessType
  businessName  String
  email         String       @unique
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  users         User[]
  services      Service[]
  bookings      Booking[]
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String?
  firstName      String
  lastName       String
  phone          String?
  role           String   @default("customer") // customer, technician, admin
  organizationId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization? @relation(fields: [organizationId], references: [id])
  bookings       Booking[]
  technicianBookings Booking[] @relation("TechnicianBookings")
}

model Service {
  id             String   @id @default(cuid())
  name           String
  description    String?
  basePrice      Float
  duration       Int      // in minutes
  icon           String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id])
  bookings       Booking[]
}

model Booking {
  id                  String   @id @default(cuid())
  customerId          String
  technicianId        String?
  serviceId           String
  organizationId      String
  frequency           String   // once, weekly, biweekly, monthly
  date                DateTime
  time                String
  duration            String
  status              String   @default("scheduled") // scheduled, in_progress, completed, cancelled
  
  // Address
  address             String
  city                String
  state               String
  zipCode             String
  
  // Pricing
  basePrice           Float
  discount            Float    @default(0)
  finalPrice          Float
  
  // Additional
  specialInstructions String?
  rating              Int?
  review              String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  customer            User         @relation(fields: [customerId], references: [id])
  technician          User?        @relation("TechnicianBookings", fields: [technicianId], references: [id])
  service             Service      @relation(fields: [serviceId], references: [id])
  organization        Organization @relation(fields: [organizationId], references: [id])
}

model Revenue {
  id        String   @id @default(cuid())
  month     String
  year      Int
  amount    Float
  createdAt DateTime @default(now())
}